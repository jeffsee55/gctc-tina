# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getDocumentFields: JSON!
  getTrainingDocument(relativePath: String): TrainingDocument!
  getTrainingList(before: String, after: String, first: Int, last: Int): TrainingConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
  getPagesDocument(relativePath: String): PagesDocument!
  getPagesList(before: String, after: String, first: Int, last: Int): PagesConnection!
  getFormsDocument(relativePath: String): FormsDocument!
  getFormsList(before: String, after: String, first: Int, last: Int): FormsConnection!
  getCuratedDocument(relativePath: String): CuratedDocument!
  getCuratedList(before: String, after: String, first: Int, last: Int): CuratedConnection!
  getAuthorsDocument(relativePath: String): AuthorsDocument!
  getAuthorsList(before: String, after: String, first: Int, last: Int): AuthorsConnection!
  getNavDocument(relativePath: String): NavDocument!
  getNavList(before: String, after: String, first: Int, last: Int): NavConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = TrainingDocument | PostsDocument | PagesDocument | FormsDocument | CuratedDocument | AuthorsDocument | NavDocument

type TrainingTrainingWorkouts {
  Day: Int
  Title: String
  Description: String
  Category: String
}

type TrainingTraining {
  name: String
  description: String
  event: String
  category: String
  time: String
  workouts: [TrainingTrainingWorkouts]
}

union Training = TrainingTraining

type TrainingDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Training!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type TrainingConnectionEdges {
  cursor: String
  node: TrainingDocument
}

type TrainingConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [TrainingConnectionEdges]
}

type PostsPostAccolades {
  figure: String
  description: String
}

union PostsPostAuthorDocument = AuthorsDocument

type PostsPost {
  title: String
  tags: [String]
  image: String
  image_small: String
  accolades: PostsPostAccolades
  author: PostsPostAuthorDocument
  preface: String
  _body: String
}

union Posts = PostsPost

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

type PagesPageSeo {
  title: String
  description: String
  image: String
}

union PagesPageLayersLayerTeamMembersReferenceDocument = AuthorsDocument

type PagesPageLayersLayerTeamMembers {
  reference: PagesPageLayersLayerTeamMembersReferenceDocument
}

type PagesPageLayersLayerTeam {
  description: String
  members: [PagesPageLayersLayerTeamMembers]
}

union PagesPageLayersLayerPostListPostsReferenceDocument = PostsDocument

type PagesPageLayersLayerPostListPosts {
  reference: PagesPageLayersLayerPostListPostsReferenceDocument
}

type PagesPageLayersLayerPostList {
  description: String
  posts: [PagesPageLayersLayerPostListPosts]
}

type PagesPageLayersLayerDarkFeatureFeature_list {
  header: String
  description: String
}

type PagesPageLayersLayerDarkFeature {
  hint: String
  title: String
  description: String
  feature_list: [PagesPageLayersLayerDarkFeatureFeature_list]
}

union PagesPageLayersLayerLeadershipLeadersReferenceDocument = AuthorsDocument

type PagesPageLayersLayerLeadershipLeaders {
  reference: PagesPageLayersLayerLeadershipLeadersReferenceDocument
}

type PagesPageLayersLayerLeadership {
  title: String
  leaders: [PagesPageLayersLayerLeadershipLeaders]
}

type PagesPageLayersLayerSponsorsSponsors {
  name: String
  link: String
}

type PagesPageLayersLayerSponsors {
  title: String
  sponsors: [PagesPageLayersLayerSponsorsSponsors]
}

union PagesPageLayersCuratedCollectionPosts_collectionReferenceDocument = PostsDocument

type PagesPageLayersCuratedCollectionPosts_collection {
  reference: PagesPageLayersCuratedCollectionPosts_collectionReferenceDocument
}

type PagesPageLayersCuratedCollection {
  description: String
  posts_collection: [PagesPageLayersCuratedCollectionPosts_collection]
}

type PagesPageLayersLayerCta {
  description: String
  cta_text: String
  cta_link: String
  cta_image: String
}

union PagesPageLayers = PagesPageLayersLayerTeam | PagesPageLayersLayerPostList | PagesPageLayersLayerDarkFeature | PagesPageLayersLayerLeadership | PagesPageLayersLayerSponsors | PagesPageLayersCuratedCollection | PagesPageLayersLayerCta

type PagesPage {
  title: String
  _body: String
  seo: PagesPageSeo
  layers: [PagesPageLayers]
}

type PagesTrainingPageFaq {
  question: String
  answer: String
}

type PagesTrainingPage {
  faq: [PagesTrainingPageFaq]
}

union Pages = PagesPage | PagesTrainingPage

type PagesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Pages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PagesConnectionEdges {
  cursor: String
  node: PagesDocument
}

type PagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PagesConnectionEdges]
}

type FormsJenCcoachingFieldsFieldBoolean {
  label: String
  subLabel: String
  name: String
}

type FormsJenCcoachingFieldsFieldText {
  label: String
  subLabel: String
  placeholder: String
  prefix: String
  suffix: String
  name: String
}

type FormsJenCcoachingFieldsFieldTextarea {
  label: String
  subLabel: String
  placeholder: String
  name: String
}

type FormsJenCcoachingFieldsFieldCheckboxOptions {
  label: String
  value: String
}

type FormsJenCcoachingFieldsFieldCheckbox {
  label: String
  subLabel: String
  placeholder: String
  name: String
  options: [FormsJenCcoachingFieldsFieldCheckboxOptions]
}

type FormsJenCcoachingFieldsFieldRadioOptions {
  label: String
  value: String
}

type FormsJenCcoachingFieldsFieldRadio {
  label: String
  subLabel: String
  placeholder: String
  name: String
  options: [FormsJenCcoachingFieldsFieldRadioOptions]
}

type FormsJenCcoachingFieldsFieldGroupTextFieldsFieldText {
  label: String
  subLabel: String
  name: String
}

union FormsJenCcoachingFieldsFieldGroupTextFields = FormsJenCcoachingFieldsFieldGroupTextFieldsFieldText

type FormsJenCcoachingFieldsFieldGroupText {
  label: String
  subLabel: String
  fields: [FormsJenCcoachingFieldsFieldGroupTextFields]
  prefix_class: String
}

type FormsJenCcoachingFieldsFieldWeekCheckbox {
  label: String
  subLabel: String
  placeholder: String
  name: String
}

union FormsJenCcoachingFields = FormsJenCcoachingFieldsFieldBoolean | FormsJenCcoachingFieldsFieldText | FormsJenCcoachingFieldsFieldTextarea | FormsJenCcoachingFieldsFieldCheckbox | FormsJenCcoachingFieldsFieldRadio | FormsJenCcoachingFieldsFieldGroupText | FormsJenCcoachingFieldsFieldWeekCheckbox

type FormsJenCcoaching {
  title: String
  description: String
  fields: [FormsJenCcoachingFields]
}

union Forms = FormsJenCcoaching

type FormsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Forms!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type FormsConnectionEdges {
  cursor: String
  node: FormsDocument
}

type FormsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [FormsConnectionEdges]
}

union CuratedCuratedCurationsCuratedHeroHero_postDocument = PostsDocument

type CuratedCuratedCurationsCuratedHero {
  description: String
  hero_post: CuratedCuratedCurationsCuratedHeroHero_postDocument
}

union CuratedCuratedCurationsCuratedCollectionPosts_collectionReferenceDocument = PostsDocument

type CuratedCuratedCurationsCuratedCollectionPosts_collection {
  reference: CuratedCuratedCurationsCuratedCollectionPosts_collectionReferenceDocument
}

type CuratedCuratedCurationsCuratedCollection {
  description: String
  posts_collection: [CuratedCuratedCurationsCuratedCollectionPosts_collection]
}

union CuratedCuratedCurations = CuratedCuratedCurationsCuratedHero | CuratedCuratedCurationsCuratedCollection

type CuratedCurated {
  title: String
  curations: [CuratedCuratedCurations]
}

union Curated = CuratedCurated

type CuratedDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Curated!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type CuratedConnectionEdges {
  cursor: String
  node: CuratedDocument
}

type CuratedConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [CuratedConnectionEdges]
}

type AuthorsAuthorAccolades {
  figure: String
  description: String
}

union AuthorsAuthorFormDocument = FormsDocument

union AuthorsAuthorPosts_collectionReferenceDocument = PostsDocument

type AuthorsAuthorPosts_collection {
  reference: AuthorsAuthorPosts_collectionReferenceDocument
}

type AuthorsAuthorEbook {
  title: String
  description: String
  link: String
  link_text: String
  image: String
}

type AuthorsAuthor {
  name: String
  description: String
  _body: String
  role: String
  accolades: [AuthorsAuthorAccolades]
  image: String
  bio_image: String
  story_image: String
  form: AuthorsAuthorFormDocument
  posts_collection: [AuthorsAuthorPosts_collection]
  ebook: AuthorsAuthorEbook
}

type AuthorsAthletePersonal_bests {
  event: String
  time: String
}

type AuthorsAthleteAccolades {
  figure: String
  description: String
}

type AuthorsAthleteSocial_media {
  source: String
  handle: String
}

type AuthorsAthlete {
  name: String
  description: String
  _body: String
  country: String
  personal_bests: [AuthorsAthletePersonal_bests]
  accolades: [AuthorsAthleteAccolades]
  social_media: [AuthorsAthleteSocial_media]
  image: String
}

union Authors = AuthorsAuthor | AuthorsAthlete

type AuthorsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Authors!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AuthorsConnectionEdges {
  cursor: String
  node: AuthorsDocument
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [AuthorsConnectionEdges]
}

type NavNavItemsNavItemPopoutChildren {
  label: String
  description: String
  value: String
  icon: String
}

type NavNavItemsNavItemPopoutExtra {
  label: String
  value: String
  icon: String
}

type NavNavItemsNavItemPopout {
  label: String
  children: [NavNavItemsNavItemPopoutChildren]
  extra: [NavNavItemsNavItemPopoutExtra]
}

union NavNavItemsNavItemMoreFeatured_postDocument = PostsDocument

union NavNavItemsNavItemMoreFrom_the_blogReferenceDocument = PostsDocument

type NavNavItemsNavItemMoreFrom_the_blog {
  reference: NavNavItemsNavItemMoreFrom_the_blogReferenceDocument
}

type NavNavItemsNavItemMoreRead_more {
  label: String
  value: String
}

type NavNavItemsNavItemMore {
  label: String
  featured_post: NavNavItemsNavItemMoreFeatured_postDocument
  from_the_blog: [NavNavItemsNavItemMoreFrom_the_blog]
  read_more: NavNavItemsNavItemMoreRead_more
}

type NavNavItemsNavItemLink {
  label: String
  value: String
}

union NavNavItems = NavNavItemsNavItemPopout | NavNavItemsNavItemMore | NavNavItemsNavItemLink

type NavNav {
  items: [NavNavItems]
  show_auth: Boolean
}

union Nav = NavNav

type NavDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Nav!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type NavConnectionEdges {
  cursor: String
  node: NavDocument
}

type NavConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [NavConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateTrainingDocument(relativePath: String!, params: TrainingMutation!): TrainingDocument!
  createTrainingDocument(relativePath: String!, params: TrainingMutation!): TrainingDocument!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  createPostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  updatePagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
  createPagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
  updateFormsDocument(relativePath: String!, params: FormsMutation!): FormsDocument!
  createFormsDocument(relativePath: String!, params: FormsMutation!): FormsDocument!
  updateCuratedDocument(relativePath: String!, params: CuratedMutation!): CuratedDocument!
  createCuratedDocument(relativePath: String!, params: CuratedMutation!): CuratedDocument!
  updateAuthorsDocument(relativePath: String!, params: AuthorsMutation!): AuthorsDocument!
  createAuthorsDocument(relativePath: String!, params: AuthorsMutation!): AuthorsDocument!
  updateNavDocument(relativePath: String!, params: NavMutation!): NavDocument!
  createNavDocument(relativePath: String!, params: NavMutation!): NavDocument!
}

input DocumentMutation {
  training: TrainingMutation
  posts: PostsMutation
  pages: PagesMutation
  forms: FormsMutation
  curated: CuratedMutation
  authors: AuthorsMutation
  nav: NavMutation
}

input TrainingTrainingWorkoutsMutation {
  Day: Int
  Title: String
  Description: String
  Category: String
}

input TrainingTrainingMutation {
  name: String
  description: String
  event: String
  category: String
  time: String
  workouts: [TrainingTrainingWorkoutsMutation]
}

input TrainingMutation {
  training: TrainingTrainingMutation
}

input PostsPostAccoladesMutation {
  figure: String
  description: String
}

input PostsPostMutation {
  title: String
  tags: [String]
  image: String
  image_small: String
  accolades: PostsPostAccoladesMutation
  author: String
  preface: String
  _body: String
}

input PostsMutation {
  post: PostsPostMutation
}

input PagesPageSeoMutation {
  title: String
  description: String
  image: String
}

input PagesPageLayersLayerTeamMembersMutation {
  reference: String
}

input PagesPageLayersLayerTeamMutation {
  description: String
  members: [PagesPageLayersLayerTeamMembersMutation]
}

input PagesPageLayersLayerPostListPostsMutation {
  reference: String
}

input PagesPageLayersLayerPostListMutation {
  description: String
  posts: [PagesPageLayersLayerPostListPostsMutation]
}

input PagesPageLayersLayerDarkFeatureFeature_listMutation {
  header: String
  description: String
}

input PagesPageLayersLayerDarkFeatureMutation {
  hint: String
  title: String
  description: String
  feature_list: [PagesPageLayersLayerDarkFeatureFeature_listMutation]
}

input PagesPageLayersLayerLeadershipLeadersMutation {
  reference: String
}

input PagesPageLayersLayerLeadershipMutation {
  title: String
  leaders: [PagesPageLayersLayerLeadershipLeadersMutation]
}

input PagesPageLayersLayerSponsorsSponsorsMutation {
  name: String
  link: String
}

input PagesPageLayersLayerSponsorsMutation {
  title: String
  sponsors: [PagesPageLayersLayerSponsorsSponsorsMutation]
}

input PagesPageLayersCuratedCollectionPosts_collectionMutation {
  reference: String
}

input PagesPageLayersCuratedCollectionMutation {
  description: String
  posts_collection: [PagesPageLayersCuratedCollectionPosts_collectionMutation]
}

input PagesPageLayersLayerCtaMutation {
  description: String
  cta_text: String
  cta_link: String
  cta_image: String
}

input PagesPageLayersMutation {
  layerTeam: PagesPageLayersLayerTeamMutation
  layerPostList: PagesPageLayersLayerPostListMutation
  layerDarkFeature: PagesPageLayersLayerDarkFeatureMutation
  layerLeadership: PagesPageLayersLayerLeadershipMutation
  layerSponsors: PagesPageLayersLayerSponsorsMutation
  curatedCollection: PagesPageLayersCuratedCollectionMutation
  layerCta: PagesPageLayersLayerCtaMutation
}

input PagesPageMutation {
  title: String
  _body: String
  seo: PagesPageSeoMutation
  layers: [PagesPageLayersMutation]
}

input PagesTrainingPageFaqMutation {
  question: String
  answer: String
}

input PagesTrainingPageMutation {
  faq: [PagesTrainingPageFaqMutation]
}

input PagesMutation {
  page: PagesPageMutation
  trainingPage: PagesTrainingPageMutation
}

input FormsJenCcoachingFieldsFieldBooleanMutation {
  label: String
  subLabel: String
  name: String
}

input FormsJenCcoachingFieldsFieldTextMutation {
  label: String
  subLabel: String
  placeholder: String
  prefix: String
  suffix: String
  name: String
}

input FormsJenCcoachingFieldsFieldTextareaMutation {
  label: String
  subLabel: String
  placeholder: String
  name: String
}

input FormsJenCcoachingFieldsFieldCheckboxOptionsMutation {
  label: String
  value: String
}

input FormsJenCcoachingFieldsFieldCheckboxMutation {
  label: String
  subLabel: String
  placeholder: String
  name: String
  options: [FormsJenCcoachingFieldsFieldCheckboxOptionsMutation]
}

input FormsJenCcoachingFieldsFieldRadioOptionsMutation {
  label: String
  value: String
}

input FormsJenCcoachingFieldsFieldRadioMutation {
  label: String
  subLabel: String
  placeholder: String
  name: String
  options: [FormsJenCcoachingFieldsFieldRadioOptionsMutation]
}

input FormsJenCcoachingFieldsFieldGroupTextFieldsFieldTextMutation {
  label: String
  subLabel: String
  name: String
}

input FormsJenCcoachingFieldsFieldGroupTextFieldsMutation {
  fieldText: FormsJenCcoachingFieldsFieldGroupTextFieldsFieldTextMutation
}

input FormsJenCcoachingFieldsFieldGroupTextMutation {
  label: String
  subLabel: String
  fields: [FormsJenCcoachingFieldsFieldGroupTextFieldsMutation]
  prefix_class: String
}

input FormsJenCcoachingFieldsFieldWeekCheckboxMutation {
  label: String
  subLabel: String
  placeholder: String
  name: String
}

input FormsJenCcoachingFieldsMutation {
  fieldBoolean: FormsJenCcoachingFieldsFieldBooleanMutation
  fieldText: FormsJenCcoachingFieldsFieldTextMutation
  fieldTextarea: FormsJenCcoachingFieldsFieldTextareaMutation
  fieldCheckbox: FormsJenCcoachingFieldsFieldCheckboxMutation
  fieldRadio: FormsJenCcoachingFieldsFieldRadioMutation
  fieldGroupText: FormsJenCcoachingFieldsFieldGroupTextMutation
  fieldWeekCheckbox: FormsJenCcoachingFieldsFieldWeekCheckboxMutation
}

input FormsJenCcoachingMutation {
  title: String
  description: String
  fields: [FormsJenCcoachingFieldsMutation]
}

input FormsMutation {
  jenCcoaching: FormsJenCcoachingMutation
}

input CuratedCuratedCurationsCuratedHeroMutation {
  description: String
  hero_post: String
}

input CuratedCuratedCurationsCuratedCollectionPosts_collectionMutation {
  reference: String
}

input CuratedCuratedCurationsCuratedCollectionMutation {
  description: String
  posts_collection: [CuratedCuratedCurationsCuratedCollectionPosts_collectionMutation]
}

input CuratedCuratedCurationsMutation {
  curatedHero: CuratedCuratedCurationsCuratedHeroMutation
  curatedCollection: CuratedCuratedCurationsCuratedCollectionMutation
}

input CuratedCuratedMutation {
  title: String
  curations: [CuratedCuratedCurationsMutation]
}

input CuratedMutation {
  curated: CuratedCuratedMutation
}

input AuthorsAuthorAccoladesMutation {
  figure: String
  description: String
}

input AuthorsAuthorPosts_collectionMutation {
  reference: String
}

input AuthorsAuthorEbookMutation {
  title: String
  description: String
  link: String
  link_text: String
  image: String
}

input AuthorsAuthorMutation {
  name: String
  description: String
  _body: String
  role: String
  accolades: [AuthorsAuthorAccoladesMutation]
  image: String
  bio_image: String
  story_image: String
  form: String
  posts_collection: [AuthorsAuthorPosts_collectionMutation]
  ebook: AuthorsAuthorEbookMutation
}

input AuthorsAthletePersonal_bestsMutation {
  event: String
  time: String
}

input AuthorsAthleteAccoladesMutation {
  figure: String
  description: String
}

input AuthorsAthleteSocial_mediaMutation {
  source: String
  handle: String
}

input AuthorsAthleteMutation {
  name: String
  description: String
  _body: String
  country: String
  personal_bests: [AuthorsAthletePersonal_bestsMutation]
  accolades: [AuthorsAthleteAccoladesMutation]
  social_media: [AuthorsAthleteSocial_mediaMutation]
  image: String
}

input AuthorsMutation {
  author: AuthorsAuthorMutation
  athlete: AuthorsAthleteMutation
}

input NavNavItemsNavItemPopoutChildrenMutation {
  label: String
  description: String
  value: String
  icon: String
}

input NavNavItemsNavItemPopoutExtraMutation {
  label: String
  value: String
  icon: String
}

input NavNavItemsNavItemPopoutMutation {
  label: String
  children: [NavNavItemsNavItemPopoutChildrenMutation]
  extra: [NavNavItemsNavItemPopoutExtraMutation]
}

input NavNavItemsNavItemMoreFrom_the_blogMutation {
  reference: String
}

input NavNavItemsNavItemMoreRead_moreMutation {
  label: String
  value: String
}

input NavNavItemsNavItemMoreMutation {
  label: String
  featured_post: String
  from_the_blog: [NavNavItemsNavItemMoreFrom_the_blogMutation]
  read_more: NavNavItemsNavItemMoreRead_moreMutation
}

input NavNavItemsNavItemLinkMutation {
  label: String
  value: String
}

input NavNavItemsMutation {
  navItemPopout: NavNavItemsNavItemPopoutMutation
  navItemMore: NavNavItemsNavItemMoreMutation
  navItemLink: NavNavItemsNavItemLinkMutation
}

input NavNavMutation {
  items: [NavNavItemsMutation]
  show_auth: Boolean
}

input NavMutation {
  nav: NavNavMutation
}

schema {
  query: Query
  mutation: Mutation
}
  