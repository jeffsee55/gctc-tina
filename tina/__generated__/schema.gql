# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  posts(relativePath: String): Posts!
  postsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostsFilter): PostsConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  forms(relativePath: String): Forms!
  formsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FormsFilter): FormsConnection!
  curated(relativePath: String): Curated!
  curatedConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CuratedFilter): CuratedConnection!
  authors(relativePath: String): Authors!
  authorsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorsFilter): AuthorsConnection!
  trainingPlans(relativePath: String): TrainingPlans!
  trainingPlansConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TrainingPlansFilter): TrainingPlansConnection!
  nav(relativePath: String): Nav!
  navConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavFilter): NavConnection!
}

input DocumentFilter {
  posts: PostsFilter
  pages: PagesFilter
  forms: FormsFilter
  curated: CuratedFilter
  authors: AuthorsFilter
  trainingPlans: TrainingPlansFilter
  nav: NavFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = PostsPost | PagesPage | PagesTrainingPage | FormsJenCcoaching | CuratedCurated | AuthorsAuthor | AuthorsAthlete | TrainingPlans | NavNav | Folder

type PostsPostAccolades {
  figure: String
  description: String
}

union PostsPostAuthor = AuthorsAuthor | AuthorsAthlete

type PostsPost implements Node & Document {
  title: String
  tags: [String]
  image: String
  image_small: String
  accolades: PostsPostAccolades
  author: PostsPostAuthor
  preface: String
  _body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Posts = PostsPost

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PostsPostAccoladesFilter {
  figure: StringFilter
  description: StringFilter
}

input PostsPostAuthorFilter {
  authors: AuthorsFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostsPostFilter {
  title: StringFilter
  tags: StringFilter
  image: StringFilter
  image_small: StringFilter
  accolades: PostsPostAccoladesFilter
  author: PostsPostAuthorFilter
  preface: StringFilter
  _body: RichTextFilter
}

input PostsFilter {
  post: PostsPostFilter
}

type PostsConnectionEdges {
  cursor: String!
  node: Posts
}

type PostsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostsConnectionEdges]
}

type PagesPageSeo {
  title: String
  description: String
  image: String
}

type PagesPageLayersLayerHero {
  image: String
}

union PagesPageLayersLayerTeamMembersReference = AuthorsAuthor | AuthorsAthlete

type PagesPageLayersLayerTeamMembers {
  reference: PagesPageLayersLayerTeamMembersReference
}

type PagesPageLayersLayerTeam {
  description: String
  members: [PagesPageLayersLayerTeamMembers]
}

union PagesPageLayersLayerPostListPostsReference = PostsPost

type PagesPageLayersLayerPostListPosts {
  reference: PagesPageLayersLayerPostListPostsReference
}

type PagesPageLayersLayerPostList {
  postListDescription: JSON
  posts: [PagesPageLayersLayerPostListPosts]
}

type PagesPageLayersLayerDarkFeatureFeature_list {
  header: String
  description: String
}

type PagesPageLayersLayerDarkFeature {
  hint: String
  title: String
  description: String
  feature_list: [PagesPageLayersLayerDarkFeatureFeature_list]
}

union PagesPageLayersLayerLeadershipLeadersReference = AuthorsAuthor | AuthorsAthlete

type PagesPageLayersLayerLeadershipLeaders {
  reference: PagesPageLayersLayerLeadershipLeadersReference
}

type PagesPageLayersLayerLeadership {
  title: String
  leaders: [PagesPageLayersLayerLeadershipLeaders]
}

type PagesPageLayersLayerSponsorsSponsors {
  name: String
  link: String
}

type PagesPageLayersLayerSponsors {
  title: String
  sponsors: [PagesPageLayersLayerSponsorsSponsors]
}

union CuratedCuratedCurationsCuratedCollectionPosts_collectionReference = PostsPost

type PagesPageLayersCuratedCollectionPosts_collection {
  reference: CuratedCuratedCurationsCuratedCollectionPosts_collectionReference
}

type PagesPageLayersCuratedCollection {
  curatedDescription: JSON
  posts_collection: [PagesPageLayersCuratedCollectionPosts_collection]
}

type PagesPageLayersLayerCta {
  ctaDescription: JSON
  cta_text: String
  cta_link: String
  cta_image: String
}

union PagesPageLayers = PagesPageLayersLayerHero | PagesPageLayersLayerTeam | PagesPageLayersLayerPostList | PagesPageLayersLayerDarkFeature | PagesPageLayersLayerLeadership | PagesPageLayersLayerSponsors | PagesPageLayersCuratedCollection | PagesPageLayersLayerCta

type PagesPage implements Node & Document {
  title: String
  _body: String
  seo: PagesPageSeo
  layers: [PagesPageLayers]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PagesTrainingPageFaq {
  question: String
  answer: String
}

type PagesTrainingPage implements Node & Document {
  faq: [PagesTrainingPageFaq]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Pages = PagesPage | PagesTrainingPage

input PagesPageSeoFilter {
  title: StringFilter
  description: StringFilter
  image: StringFilter
}

input PagesPageLayersLayerHeroFilter {
  image: StringFilter
}

input PagesPageLayersLayerTeamMembersReferenceFilter {
  authors: AuthorsFilter
}

input PagesPageLayersLayerTeamMembersFilter {
  reference: PagesPageLayersLayerTeamMembersReferenceFilter
}

input PagesPageLayersLayerTeamFilter {
  description: StringFilter
  members: PagesPageLayersLayerTeamMembersFilter
}

input PagesPageLayersLayerPostListPostsReferenceFilter {
  posts: PostsFilter
}

input PagesPageLayersLayerPostListPostsFilter {
  reference: PagesPageLayersLayerPostListPostsReferenceFilter
}

input PagesPageLayersLayerPostListFilter {
  postListDescription: RichTextFilter
  posts: PagesPageLayersLayerPostListPostsFilter
}

input PagesPageLayersLayerDarkFeatureFeature_listFilter {
  header: StringFilter
  description: StringFilter
}

input PagesPageLayersLayerDarkFeatureFilter {
  hint: StringFilter
  title: StringFilter
  description: StringFilter
  feature_list: PagesPageLayersLayerDarkFeatureFeature_listFilter
}

input PagesPageLayersLayerLeadershipLeadersReferenceFilter {
  authors: AuthorsFilter
}

input PagesPageLayersLayerLeadershipLeadersFilter {
  reference: PagesPageLayersLayerLeadershipLeadersReferenceFilter
}

input PagesPageLayersLayerLeadershipFilter {
  title: StringFilter
  leaders: PagesPageLayersLayerLeadershipLeadersFilter
}

input PagesPageLayersLayerSponsorsSponsorsFilter {
  name: StringFilter
  link: StringFilter
}

input PagesPageLayersLayerSponsorsFilter {
  title: StringFilter
  sponsors: PagesPageLayersLayerSponsorsSponsorsFilter
}

input CuratedCuratedCurationsCuratedCollectionPosts_collectionReferenceFilter {
  posts: PostsFilter
}

input PagesPageLayersCuratedCollectionPosts_collectionFilter {
  reference: CuratedCuratedCurationsCuratedCollectionPosts_collectionReferenceFilter
}

input PagesPageLayersCuratedCollectionFilter {
  curatedDescription: RichTextFilter
  posts_collection: PagesPageLayersCuratedCollectionPosts_collectionFilter
}

input PagesPageLayersLayerCtaFilter {
  ctaDescription: RichTextFilter
  cta_text: StringFilter
  cta_link: StringFilter
  cta_image: StringFilter
}

input PagesPageLayersFilter {
  layerHero: PagesPageLayersLayerHeroFilter
  layerTeam: PagesPageLayersLayerTeamFilter
  layerPostList: PagesPageLayersLayerPostListFilter
  layerDarkFeature: PagesPageLayersLayerDarkFeatureFilter
  layerLeadership: PagesPageLayersLayerLeadershipFilter
  layerSponsors: PagesPageLayersLayerSponsorsFilter
  curatedCollection: PagesPageLayersCuratedCollectionFilter
  layerCta: PagesPageLayersLayerCtaFilter
}

input PagesPageFilter {
  title: StringFilter
  _body: StringFilter
  seo: PagesPageSeoFilter
  layers: PagesPageLayersFilter
}

input PagesTrainingPageFaqFilter {
  question: StringFilter
  answer: StringFilter
}

input PagesTrainingPageFilter {
  faq: PagesTrainingPageFaqFilter
}

input PagesFilter {
  page: PagesPageFilter
  trainingPage: PagesTrainingPageFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type FormsJenCcoachingFieldsFieldBoolean {
  label: String
  subLabel: String
  name: String
}

type FormsJenCcoachingFieldsFieldText {
  label: String
  subLabel: String
  placeholder: String
  prefix: String
  suffix: String
  name: String
}

type FormsJenCcoachingFieldsFieldTextarea {
  label: String
  subLabel: String
  placeholder: String
  name: String
}

type FormsJenCcoachingFieldsFieldCheckboxOptions {
  label: String
  value: String
}

type FormsJenCcoachingFieldsFieldCheckbox {
  label: String
  subLabel: String
  placeholder: String
  name: String
  options: [FormsJenCcoachingFieldsFieldCheckboxOptions]
}

type FormsJenCcoachingFieldsFieldRadioOptions {
  label: String
  value: String
}

type FormsJenCcoachingFieldsFieldRadio {
  label: String
  subLabel: String
  placeholder: String
  name: String
  options: [FormsJenCcoachingFieldsFieldRadioOptions]
}

type FormsJenCcoachingFieldsFieldGroupTextFieldsFieldText {
  label: String
  subLabel: String
  name: String
}

union FormsJenCcoachingFieldsFieldGroupTextFields = FormsJenCcoachingFieldsFieldGroupTextFieldsFieldText

type FormsJenCcoachingFieldsFieldGroupText {
  label: String
  subLabel: String
  fields: [FormsJenCcoachingFieldsFieldGroupTextFields]
  prefix_class: String
}

type FormsJenCcoachingFieldsFieldWeekCheckbox {
  label: String
  subLabel: String
  placeholder: String
  name: String
}

union FormsJenCcoachingFields = FormsJenCcoachingFieldsFieldBoolean | FormsJenCcoachingFieldsFieldText | FormsJenCcoachingFieldsFieldTextarea | FormsJenCcoachingFieldsFieldCheckbox | FormsJenCcoachingFieldsFieldRadio | FormsJenCcoachingFieldsFieldGroupText | FormsJenCcoachingFieldsFieldWeekCheckbox

type FormsJenCcoaching implements Node & Document {
  title: String
  description: String
  fields: [FormsJenCcoachingFields]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Forms = FormsJenCcoaching

input FormsJenCcoachingFieldsFieldBooleanFilter {
  label: StringFilter
  subLabel: StringFilter
  name: StringFilter
}

input FormsJenCcoachingFieldsFieldTextFilter {
  label: StringFilter
  subLabel: StringFilter
  placeholder: StringFilter
  prefix: StringFilter
  suffix: StringFilter
  name: StringFilter
}

input FormsJenCcoachingFieldsFieldTextareaFilter {
  label: StringFilter
  subLabel: StringFilter
  placeholder: StringFilter
  name: StringFilter
}

input FormsJenCcoachingFieldsFieldCheckboxOptionsFilter {
  label: StringFilter
  value: StringFilter
}

input FormsJenCcoachingFieldsFieldCheckboxFilter {
  label: StringFilter
  subLabel: StringFilter
  placeholder: StringFilter
  name: StringFilter
  options: FormsJenCcoachingFieldsFieldCheckboxOptionsFilter
}

input FormsJenCcoachingFieldsFieldRadioOptionsFilter {
  label: StringFilter
  value: StringFilter
}

input FormsJenCcoachingFieldsFieldRadioFilter {
  label: StringFilter
  subLabel: StringFilter
  placeholder: StringFilter
  name: StringFilter
  options: FormsJenCcoachingFieldsFieldRadioOptionsFilter
}

input FormsJenCcoachingFieldsFieldGroupTextFieldsFieldTextFilter {
  label: StringFilter
  subLabel: StringFilter
  name: StringFilter
}

input FormsJenCcoachingFieldsFieldGroupTextFieldsFilter {
  fieldText: FormsJenCcoachingFieldsFieldGroupTextFieldsFieldTextFilter
}

input FormsJenCcoachingFieldsFieldGroupTextFilter {
  label: StringFilter
  subLabel: StringFilter
  fields: FormsJenCcoachingFieldsFieldGroupTextFieldsFilter
  prefix_class: StringFilter
}

input FormsJenCcoachingFieldsFieldWeekCheckboxFilter {
  label: StringFilter
  subLabel: StringFilter
  placeholder: StringFilter
  name: StringFilter
}

input FormsJenCcoachingFieldsFilter {
  fieldBoolean: FormsJenCcoachingFieldsFieldBooleanFilter
  fieldText: FormsJenCcoachingFieldsFieldTextFilter
  fieldTextarea: FormsJenCcoachingFieldsFieldTextareaFilter
  fieldCheckbox: FormsJenCcoachingFieldsFieldCheckboxFilter
  fieldRadio: FormsJenCcoachingFieldsFieldRadioFilter
  fieldGroupText: FormsJenCcoachingFieldsFieldGroupTextFilter
  fieldWeekCheckbox: FormsJenCcoachingFieldsFieldWeekCheckboxFilter
}

input FormsJenCcoachingFilter {
  title: StringFilter
  description: StringFilter
  fields: FormsJenCcoachingFieldsFilter
}

input FormsFilter {
  jenCcoaching: FormsJenCcoachingFilter
}

type FormsConnectionEdges {
  cursor: String!
  node: Forms
}

type FormsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FormsConnectionEdges]
}

union CuratedCuratedCurationsCuratedHeroHero_post = PostsPost

type CuratedCuratedCurationsCuratedHero {
  curatedDescription: JSON
  hero_post: CuratedCuratedCurationsCuratedHeroHero_post
}

type CuratedCuratedCurationsCuratedCollectionPosts_collection {
  reference: CuratedCuratedCurationsCuratedCollectionPosts_collectionReference
}

type CuratedCuratedCurationsCuratedCollection {
  curatedDescription: JSON
  posts_collection: [CuratedCuratedCurationsCuratedCollectionPosts_collection]
}

union CuratedCuratedCurations = CuratedCuratedCurationsCuratedHero | CuratedCuratedCurationsCuratedCollection

type CuratedCurated implements Node & Document {
  title: String
  curations: [CuratedCuratedCurations]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Curated = CuratedCurated

input CuratedCuratedCurationsCuratedHeroHero_postFilter {
  posts: PostsFilter
}

input CuratedCuratedCurationsCuratedHeroFilter {
  curatedDescription: RichTextFilter
  hero_post: CuratedCuratedCurationsCuratedHeroHero_postFilter
}

input CuratedCuratedCurationsCuratedCollectionPosts_collectionFilter {
  reference: CuratedCuratedCurationsCuratedCollectionPosts_collectionReferenceFilter
}

input CuratedCuratedCurationsCuratedCollectionFilter {
  curatedDescription: RichTextFilter
  posts_collection: CuratedCuratedCurationsCuratedCollectionPosts_collectionFilter
}

input CuratedCuratedCurationsFilter {
  curatedHero: CuratedCuratedCurationsCuratedHeroFilter
  curatedCollection: CuratedCuratedCurationsCuratedCollectionFilter
}

input CuratedCuratedFilter {
  title: StringFilter
  curations: CuratedCuratedCurationsFilter
}

input CuratedFilter {
  curated: CuratedCuratedFilter
}

type CuratedConnectionEdges {
  cursor: String!
  node: Curated
}

type CuratedConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CuratedConnectionEdges]
}

type AuthorsAuthorAccolades {
  figure: String
  description: String
}

union AuthorsAuthorForm = FormsJenCcoaching

union AuthorsAuthorPosts_collectionReference = PostsPost

type AuthorsAuthorPosts_collection {
  reference: AuthorsAuthorPosts_collectionReference
}

type AuthorsAuthorEbook {
  title: String
  description: String
  link: String
  link_text: String
  image: String
}

type AuthorsAuthor implements Node & Document {
  name: String
  bioDescription: JSON
  _body: JSON
  role: String
  accolades: [AuthorsAuthorAccolades]
  image: String
  bio_image: String
  story_image: String
  form: AuthorsAuthorForm
  posts_collection: [AuthorsAuthorPosts_collection]
  ebook: AuthorsAuthorEbook
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AuthorsAthletePersonal_bests {
  event: String
  time: String
}

type AuthorsAthleteAccolades {
  figure: String
  description: String
}

type AuthorsAthleteSocial_media {
  source: String
  handle: String
}

type AuthorsAthlete implements Node & Document {
  name: String
  description: String
  _body: JSON
  country: String
  personal_bests: [AuthorsAthletePersonal_bests]
  accolades: [AuthorsAthleteAccolades]
  social_media: [AuthorsAthleteSocial_media]
  image: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Authors = AuthorsAuthor | AuthorsAthlete

input AuthorsAuthorAccoladesFilter {
  figure: StringFilter
  description: StringFilter
}

input AuthorsAuthorFormFilter {
  forms: FormsFilter
}

input AuthorsAuthorPosts_collectionReferenceFilter {
  posts: PostsFilter
}

input AuthorsAuthorPosts_collectionFilter {
  reference: AuthorsAuthorPosts_collectionReferenceFilter
}

input AuthorsAuthorEbookFilter {
  title: StringFilter
  description: StringFilter
  link: StringFilter
  link_text: StringFilter
  image: StringFilter
}

input AuthorsAuthorFilter {
  name: StringFilter
  bioDescription: RichTextFilter
  _body: RichTextFilter
  role: StringFilter
  accolades: AuthorsAuthorAccoladesFilter
  image: StringFilter
  bio_image: StringFilter
  story_image: StringFilter
  form: AuthorsAuthorFormFilter
  posts_collection: AuthorsAuthorPosts_collectionFilter
  ebook: AuthorsAuthorEbookFilter
}

input AuthorsAthletePersonal_bestsFilter {
  event: StringFilter
  time: StringFilter
}

input AuthorsAthleteAccoladesFilter {
  figure: StringFilter
  description: StringFilter
}

input AuthorsAthleteSocial_mediaFilter {
  source: StringFilter
  handle: StringFilter
}

input AuthorsAthleteFilter {
  name: StringFilter
  description: StringFilter
  _body: RichTextFilter
  country: StringFilter
  personal_bests: AuthorsAthletePersonal_bestsFilter
  accolades: AuthorsAthleteAccoladesFilter
  social_media: AuthorsAthleteSocial_mediaFilter
  image: StringFilter
}

input AuthorsFilter {
  author: AuthorsAuthorFilter
  athlete: AuthorsAthleteFilter
}

type AuthorsConnectionEdges {
  cursor: String!
  node: Authors
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorsConnectionEdges]
}

type TrainingPlansWorkouts {
  Day: Float
  Notes: String
  Title: String
  Description: String
}

type TrainingPlans implements Node & Document {
  event: String
  category: String
  time: String
  workouts: [TrainingPlansWorkouts]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input TrainingPlansWorkoutsFilter {
  Day: NumberFilter
  Notes: StringFilter
  Title: StringFilter
  Description: StringFilter
}

input TrainingPlansFilter {
  event: StringFilter
  category: StringFilter
  time: StringFilter
  workouts: TrainingPlansWorkoutsFilter
}

type TrainingPlansConnectionEdges {
  cursor: String!
  node: TrainingPlans
}

type TrainingPlansConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TrainingPlansConnectionEdges]
}

type NavNavItemsNavItemPopoutChildren {
  label: String
  description: String
  value: String
  icon: String
}

type NavNavItemsNavItemPopoutExtra {
  label: String
  value: String
  icon: String
}

type NavNavItemsNavItemPopout {
  label: String
  children: [NavNavItemsNavItemPopoutChildren]
  extra: [NavNavItemsNavItemPopoutExtra]
}

union NavNavItemsNavItemMoreFeatured_post = PostsPost

union NavNavItemsNavItemMoreFrom_the_blogReference = PostsPost

type NavNavItemsNavItemMoreFrom_the_blog {
  reference: NavNavItemsNavItemMoreFrom_the_blogReference
}

type NavNavItemsNavItemMoreRead_more {
  label: String
  value: String
}

type NavNavItemsNavItemMore {
  label: String
  featured_post: NavNavItemsNavItemMoreFeatured_post
  from_the_blog: [NavNavItemsNavItemMoreFrom_the_blog]
  read_more: NavNavItemsNavItemMoreRead_more
}

type NavNavItemsNavItemLink {
  label: String
  value: String
}

union NavNavItems = NavNavItemsNavItemPopout | NavNavItemsNavItemMore | NavNavItemsNavItemLink

type NavNav implements Node & Document {
  items: [NavNavItems]
  show_auth: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Nav = NavNav

input NavNavItemsNavItemPopoutChildrenFilter {
  label: StringFilter
  description: StringFilter
  value: StringFilter
  icon: StringFilter
}

input NavNavItemsNavItemPopoutExtraFilter {
  label: StringFilter
  value: StringFilter
  icon: StringFilter
}

input NavNavItemsNavItemPopoutFilter {
  label: StringFilter
  children: NavNavItemsNavItemPopoutChildrenFilter
  extra: NavNavItemsNavItemPopoutExtraFilter
}

input NavNavItemsNavItemMoreFeatured_postFilter {
  posts: PostsFilter
}

input NavNavItemsNavItemMoreFrom_the_blogReferenceFilter {
  posts: PostsFilter
}

input NavNavItemsNavItemMoreFrom_the_blogFilter {
  reference: NavNavItemsNavItemMoreFrom_the_blogReferenceFilter
}

input NavNavItemsNavItemMoreRead_moreFilter {
  label: StringFilter
  value: StringFilter
}

input NavNavItemsNavItemMoreFilter {
  label: StringFilter
  featured_post: NavNavItemsNavItemMoreFeatured_postFilter
  from_the_blog: NavNavItemsNavItemMoreFrom_the_blogFilter
  read_more: NavNavItemsNavItemMoreRead_moreFilter
}

input NavNavItemsNavItemLinkFilter {
  label: StringFilter
  value: StringFilter
}

input NavNavItemsFilter {
  navItemPopout: NavNavItemsNavItemPopoutFilter
  navItemMore: NavNavItemsNavItemMoreFilter
  navItemLink: NavNavItemsNavItemLinkFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input NavNavFilter {
  items: NavNavItemsFilter
  show_auth: BooleanFilter
}

input NavFilter {
  nav: NavNavFilter
}

type NavConnectionEdges {
  cursor: String!
  node: Nav
}

type NavConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePosts(relativePath: String!, params: PostsMutation!): Posts!
  createPosts(relativePath: String!, params: PostsMutation!): Posts!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateForms(relativePath: String!, params: FormsMutation!): Forms!
  createForms(relativePath: String!, params: FormsMutation!): Forms!
  updateCurated(relativePath: String!, params: CuratedMutation!): Curated!
  createCurated(relativePath: String!, params: CuratedMutation!): Curated!
  updateAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  createAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  updateTrainingPlans(relativePath: String!, params: TrainingPlansMutation!): TrainingPlans!
  createTrainingPlans(relativePath: String!, params: TrainingPlansMutation!): TrainingPlans!
  updateNav(relativePath: String!, params: NavMutation!): Nav!
  createNav(relativePath: String!, params: NavMutation!): Nav!
}

input DocumentUpdateMutation {
  posts: PostsMutation
  pages: PagesMutation
  forms: FormsMutation
  curated: CuratedMutation
  authors: AuthorsMutation
  trainingPlans: TrainingPlansMutation
  nav: NavMutation
  relativePath: String
}

input DocumentMutation {
  posts: PostsMutation
  pages: PagesMutation
  forms: FormsMutation
  curated: CuratedMutation
  authors: AuthorsMutation
  trainingPlans: TrainingPlansMutation
  nav: NavMutation
}

input PostsPostAccoladesMutation {
  figure: String
  description: String
}

input PostsPostMutation {
  title: String
  tags: [String]
  image: String
  image_small: String
  accolades: PostsPostAccoladesMutation
  author: String
  preface: String
  _body: JSON
}

input PostsMutation {
  post: PostsPostMutation
}

input PagesPageSeoMutation {
  title: String
  description: String
  image: String
}

input PagesPageLayersLayerHeroMutation {
  image: String
}

input PagesPageLayersLayerTeamMembersMutation {
  reference: String
}

input PagesPageLayersLayerTeamMutation {
  description: String
  members: [PagesPageLayersLayerTeamMembersMutation]
}

input PagesPageLayersLayerPostListPostsMutation {
  reference: String
}

input PagesPageLayersLayerPostListMutation {
  postListDescription: JSON
  posts: [PagesPageLayersLayerPostListPostsMutation]
}

input PagesPageLayersLayerDarkFeatureFeature_listMutation {
  header: String
  description: String
}

input PagesPageLayersLayerDarkFeatureMutation {
  hint: String
  title: String
  description: String
  feature_list: [PagesPageLayersLayerDarkFeatureFeature_listMutation]
}

input PagesPageLayersLayerLeadershipLeadersMutation {
  reference: String
}

input PagesPageLayersLayerLeadershipMutation {
  title: String
  leaders: [PagesPageLayersLayerLeadershipLeadersMutation]
}

input PagesPageLayersLayerSponsorsSponsorsMutation {
  name: String
  link: String
}

input PagesPageLayersLayerSponsorsMutation {
  title: String
  sponsors: [PagesPageLayersLayerSponsorsSponsorsMutation]
}

input PagesPageLayersCuratedCollectionPosts_collectionMutation {
  reference: String
}

input PagesPageLayersCuratedCollectionMutation {
  curatedDescription: JSON
  posts_collection: [PagesPageLayersCuratedCollectionPosts_collectionMutation]
}

input PagesPageLayersLayerCtaMutation {
  ctaDescription: JSON
  cta_text: String
  cta_link: String
  cta_image: String
}

input PagesPageLayersMutation {
  layerHero: PagesPageLayersLayerHeroMutation
  layerTeam: PagesPageLayersLayerTeamMutation
  layerPostList: PagesPageLayersLayerPostListMutation
  layerDarkFeature: PagesPageLayersLayerDarkFeatureMutation
  layerLeadership: PagesPageLayersLayerLeadershipMutation
  layerSponsors: PagesPageLayersLayerSponsorsMutation
  curatedCollection: PagesPageLayersCuratedCollectionMutation
  layerCta: PagesPageLayersLayerCtaMutation
}

input PagesPageMutation {
  title: String
  _body: String
  seo: PagesPageSeoMutation
  layers: [PagesPageLayersMutation]
}

input PagesTrainingPageFaqMutation {
  question: String
  answer: String
}

input PagesTrainingPageMutation {
  faq: [PagesTrainingPageFaqMutation]
}

input PagesMutation {
  page: PagesPageMutation
  trainingPage: PagesTrainingPageMutation
}

input FormsJenCcoachingFieldsFieldBooleanMutation {
  label: String
  subLabel: String
  name: String
}

input FormsJenCcoachingFieldsFieldTextMutation {
  label: String
  subLabel: String
  placeholder: String
  prefix: String
  suffix: String
  name: String
}

input FormsJenCcoachingFieldsFieldTextareaMutation {
  label: String
  subLabel: String
  placeholder: String
  name: String
}

input FormsJenCcoachingFieldsFieldCheckboxOptionsMutation {
  label: String
  value: String
}

input FormsJenCcoachingFieldsFieldCheckboxMutation {
  label: String
  subLabel: String
  placeholder: String
  name: String
  options: [FormsJenCcoachingFieldsFieldCheckboxOptionsMutation]
}

input FormsJenCcoachingFieldsFieldRadioOptionsMutation {
  label: String
  value: String
}

input FormsJenCcoachingFieldsFieldRadioMutation {
  label: String
  subLabel: String
  placeholder: String
  name: String
  options: [FormsJenCcoachingFieldsFieldRadioOptionsMutation]
}

input FormsJenCcoachingFieldsFieldGroupTextFieldsFieldTextMutation {
  label: String
  subLabel: String
  name: String
}

input FormsJenCcoachingFieldsFieldGroupTextFieldsMutation {
  fieldText: FormsJenCcoachingFieldsFieldGroupTextFieldsFieldTextMutation
}

input FormsJenCcoachingFieldsFieldGroupTextMutation {
  label: String
  subLabel: String
  fields: [FormsJenCcoachingFieldsFieldGroupTextFieldsMutation]
  prefix_class: String
}

input FormsJenCcoachingFieldsFieldWeekCheckboxMutation {
  label: String
  subLabel: String
  placeholder: String
  name: String
}

input FormsJenCcoachingFieldsMutation {
  fieldBoolean: FormsJenCcoachingFieldsFieldBooleanMutation
  fieldText: FormsJenCcoachingFieldsFieldTextMutation
  fieldTextarea: FormsJenCcoachingFieldsFieldTextareaMutation
  fieldCheckbox: FormsJenCcoachingFieldsFieldCheckboxMutation
  fieldRadio: FormsJenCcoachingFieldsFieldRadioMutation
  fieldGroupText: FormsJenCcoachingFieldsFieldGroupTextMutation
  fieldWeekCheckbox: FormsJenCcoachingFieldsFieldWeekCheckboxMutation
}

input FormsJenCcoachingMutation {
  title: String
  description: String
  fields: [FormsJenCcoachingFieldsMutation]
}

input FormsMutation {
  jenCcoaching: FormsJenCcoachingMutation
}

input CuratedCuratedCurationsCuratedHeroMutation {
  curatedDescription: JSON
  hero_post: String
}

input CuratedCuratedCurationsCuratedCollectionPosts_collectionMutation {
  reference: String
}

input CuratedCuratedCurationsCuratedCollectionMutation {
  curatedDescription: JSON
  posts_collection: [CuratedCuratedCurationsCuratedCollectionPosts_collectionMutation]
}

input CuratedCuratedCurationsMutation {
  curatedHero: CuratedCuratedCurationsCuratedHeroMutation
  curatedCollection: CuratedCuratedCurationsCuratedCollectionMutation
}

input CuratedCuratedMutation {
  title: String
  curations: [CuratedCuratedCurationsMutation]
}

input CuratedMutation {
  curated: CuratedCuratedMutation
}

input AuthorsAuthorAccoladesMutation {
  figure: String
  description: String
}

input AuthorsAuthorPosts_collectionMutation {
  reference: String
}

input AuthorsAuthorEbookMutation {
  title: String
  description: String
  link: String
  link_text: String
  image: String
}

input AuthorsAuthorMutation {
  name: String
  bioDescription: JSON
  _body: JSON
  role: String
  accolades: [AuthorsAuthorAccoladesMutation]
  image: String
  bio_image: String
  story_image: String
  form: String
  posts_collection: [AuthorsAuthorPosts_collectionMutation]
  ebook: AuthorsAuthorEbookMutation
}

input AuthorsAthletePersonal_bestsMutation {
  event: String
  time: String
}

input AuthorsAthleteAccoladesMutation {
  figure: String
  description: String
}

input AuthorsAthleteSocial_mediaMutation {
  source: String
  handle: String
}

input AuthorsAthleteMutation {
  name: String
  description: String
  _body: JSON
  country: String
  personal_bests: [AuthorsAthletePersonal_bestsMutation]
  accolades: [AuthorsAthleteAccoladesMutation]
  social_media: [AuthorsAthleteSocial_mediaMutation]
  image: String
}

input AuthorsMutation {
  author: AuthorsAuthorMutation
  athlete: AuthorsAthleteMutation
}

input TrainingPlansWorkoutsMutation {
  Day: Float
  Notes: String
  Title: String
  Description: String
}

input TrainingPlansMutation {
  event: String
  category: String
  time: String
  workouts: [TrainingPlansWorkoutsMutation]
}

input NavNavItemsNavItemPopoutChildrenMutation {
  label: String
  description: String
  value: String
  icon: String
}

input NavNavItemsNavItemPopoutExtraMutation {
  label: String
  value: String
  icon: String
}

input NavNavItemsNavItemPopoutMutation {
  label: String
  children: [NavNavItemsNavItemPopoutChildrenMutation]
  extra: [NavNavItemsNavItemPopoutExtraMutation]
}

input NavNavItemsNavItemMoreFrom_the_blogMutation {
  reference: String
}

input NavNavItemsNavItemMoreRead_moreMutation {
  label: String
  value: String
}

input NavNavItemsNavItemMoreMutation {
  label: String
  featured_post: String
  from_the_blog: [NavNavItemsNavItemMoreFrom_the_blogMutation]
  read_more: NavNavItemsNavItemMoreRead_moreMutation
}

input NavNavItemsNavItemLinkMutation {
  label: String
  value: String
}

input NavNavItemsMutation {
  navItemPopout: NavNavItemsNavItemPopoutMutation
  navItemMore: NavNavItemsNavItemMoreMutation
  navItemLink: NavNavItemsNavItemLinkMutation
}

input NavNavMutation {
  items: [NavNavItemsMutation]
  show_auth: Boolean
}

input NavMutation {
  nav: NavNavMutation
}

schema {
  query: Query
  mutation: Mutation
}
